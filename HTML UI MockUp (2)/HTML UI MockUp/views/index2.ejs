<head>
    <title>Title</title>
    <link href="/stylesheets/style.css" rel="stylesheet" type="text/css">
    <link href="/stylesheets/style2.css" rel="stylesheet" type="text/css">
    <script data-require="d3@3.5.17" data-semver="3.5.17" src="https://cdnjs.cloudflare.com/ajax/libs/d3/3.5.17/d3.js"></script>
    <link rel="stylesheet" href="https://rawgit.com/sujeetsr/d3.slider/master/d3.slider.css" />
    <script src="https://rawgit.com/sujeetsr/d3.slider/master/d3.slider.js"></script>
    <script src="https://cdn.amcharts.com/lib/4/core.js"></script>
    <script src="https://cdn.amcharts.com/lib/4/charts.js"></script>
    <script src="https://cdn.amcharts.com/lib/4/themes/animated.js"></script>
</head>
<script>
    var base_scores = [];

    function open_cma_form() {
        document.getElementById("cma_form").style.display = "block";
        document.getElementById("main-page").style.display = "none";
    }
    function close_cma_form() {
        document.getElementById("cma_form").style.display = "none";
        document.getElementById("main-page").style.display = "block";
    }
    function open_qma_form() {
        document.getElementById("qma_form").style.display = "block";
        document.getElementById("main-page").style.display = "none";
    }
    function close_qma_form() {
        document.getElementById("qma_form").style.display = "none";
        document.getElementById("main-page").style.display = "block";
    }

    function open_pie_chart() {
        document.getElementById("pie_chart_form").style.display = "block";
        document.getElementById("main-page").style.display = "none";
        //document.getElementById("chartdiv2").innerHTML = document.getElementById("chartdiv").innerHTML;
    }
    function close_pie_chart() {
        document.getElementById("pie_chart_form").style.display = "none";
        document.getElementById("main-page").style.display = "block";
    }

    function menu() {
        document.getElementById("myDropdown").classList.toggle("show");
    }
    function change_secret(val, class_list){
        let change_student_secret = document.getElementsByClassName("change_student_secret");
        let slider_list = document.getElementsByClassName('slider-value');
        let change_file_secret_list = document.getElementsByClassName("change_file_secret");
        let next_student_hidden_list = document.getElementsByClassName("next_student_hidden");
        let prev_student_hidden_list = document.getElementsByClassName("prev_student_hidden");
        for(let i = 0; i < change_file_secret_list.length; i++){
            if(change_file_secret_list[i].classList.contains(class_list[0])){
                change_file_secret_list[i].setAttribute("value", val);
                //console.log(val);
            }
        }
        for(let i=0; i < slider_list.length; i++){
            if(slider_list[i].classList.contains(class_list[0])){
                //change_student_secret[i].value = val;
                change_student_secret[i].setAttribute("value",val)
                console.log(change_student_secret[i].value);
                next_student_hidden_list[i].setAttribute("value",val)
                console.log(next_student_hidden_list[i].value);
                prev_student_hidden_list[i].setAttribute("value",val)
                console.log(prev_student_hidden_list[i].value);
            }
        }
    }
    function change_test(value, class_list){
        //console.log(value);
        let color_bar_value_list = document.getElementsByClassName("color_bar_value");
        //let secret5_list = document.getElementsByClassName("secret5");
        for (let i = 0; i < color_bar_value_list.length; i++) {
            if(color_bar_value_list[i].classList.contains(class_list[0])){
                color_bar_value_list[i].setAttribute("value", value)
                //secret5_list[i].setAttribute("value", value)
                //console.log(secret2_list[i].value)
            }
        }
    }
    function updateTextInput(parent) {
        var new_threshold_value = -1;
        for (const node of parent.childNodes) {
            if(node.id === "rangeInput"){
                new_threshold_value = node.value;
                change_secret(new_threshold_value, node.classList);
                let threshold_slider_class_list = node.classList.value;
                let circle_list = document.getElementsByClassName("color-circle");
                for(let i = 0; i < circle_list.length; i++){
                    if(circle_list[i].classList.contains(threshold_slider_class_list)) {
                        //console.log('match')
                        let base = base_scores[i];
                        console.log(base_scores);
                        let new_circle_value = 0;
                        if(node.value < 50){
                            new_circle_value = base - (node.value - 50)
                        }else if (node.value > 50){
                            new_circle_value = base + ((-1 * node.value) + 50)
                        }else{
                            new_circle_value = base
                        }
                        if(new_circle_value < 0){
                            new_circle_value = 0;
                        }else if (new_circle_value > 100){
                            new_circle_value = 100
                        }
                        //console.log(new_circle_value)
                        circle_list[i].style.setProperty('--value', new_circle_value);
                        change_test(new_circle_value, node.classList);
                        loadFunction();
                        break;
                    }
                }
            }else if(node.id === "textInput"){
                node.value = new_threshold_value;
            }
        }
    }
    function updateSlider(parent) {
        var val = -1;
        for (const node of parent.childNodes) {
            if(node.id === "textInput"){
                val = node.value;
                if (val > 100){
                    node.value = 100;
                }
            }
        }
        for (const node of parent.childNodes) {
            if(node.id === "rangeInput"){
                node.value = val;
                let sv = node.value;
                change_secret(sv, node.classList);
                let slider_class_list = node.classList.value;
                let circle_list = document.getElementsByClassName("color-circle");
                let color_bar_value_list = document.getElementsByClassName("color_bar_value");
                for(let i = 0; i < circle_list.length; i++){
                    if(circle_list[i].classList.contains(slider_class_list)){
                        let base = base_scores[i]
                        let value = 0;
                        if(sv <= 50){
                            value = base - (sv - 50)
                        }else if (sv > 50){
                            value = base + ((-1 * sv) + 50)
                        }

                        if(value < 0){
                            value = 0;
                        }else if (value > 100){
                            value = 100
                        }
                        circle_list[i].style.setProperty('--value', value);
                        change_test(value, node.classList);
                        //color_bar_value_list[i].setAttribute('value', value+'');
                        loadFunction()
                        break;
                    }
                }
            }
        }
    }

    //Regex functions for colored code - please leave in the {}
    {
        /* Rainbow v2.1.4 rainbowco.de | included languages: c, generic, java, javascript, python */ ! function(e, t) {
        "object" == typeof exports && "undefined" != typeof module ? module.exports = t() : "function" == typeof define && define.amd ? define(t) : e.Rainbow = t()
    }(this, function() {
        "use strict";

        function e() {
            return "undefined" != typeof module && "object" == typeof module.exports
        }

        function t() {
            return "undefined" == typeof document && "undefined" != typeof self
        }

        function n(e) {
            var t = e.getAttribute("data-language") || e.parentNode.getAttribute("data-language");
            if (!t) {
                var n = /\blang(?:uage)?-(\w+)/,
                    r = e.className.match(n) || e.parentNode.className.match(n);
                r && (t = r[1])
            }
            return t ? t.toLowerCase() : null
        }

        function r(e, t, n, r) {
            return (n !== e || r !== t) && (n <= e && r >= t)
        }

        function a(e) {
            return e.replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/&(?![\w\#]+;)/g, "&amp;")
        }

        function o(e, t) {
            for (var n = 0, r = 1; r < t; ++r) e[r] && (n += e[r].length);
            return n
        }

        function i(e, t, n, r) {
            return n >= e && n < t || r > e && r < t
        }

        function s(e) {
            var t = [];
            for (var n in e) e.hasOwnProperty(n) && t.push(n);
            return t.sort(function(e, t) {
                return t - e
            })
        }

        function u(e, t, n, r) {
            var a = r.substr(e);
            return r.substr(0, e) + a.replace(t, n)
        }

        function c(t, Prism) {
            if (e()) return global.Worker = require("webworker-threads").Worker, new Worker(__filename);
            var n = Prism.toString(),
                c = s.toString();
            c += a.toString(), c += r.toString(), c += i.toString(), c += u.toString(), c += o.toString(), c += n;
            var l = c + "\tthis.onmessage=" + t.toString(),
                f = new Blob([l], {
                    type: "text/javascript"
                });
            return new Worker((window.URL || window.webkitURL).createObjectURL(f))
        }

        function l(e) {
            function t() {
                self.postMessage({
                    id: n.id,
                    lang: n.lang,
                    result: a
                })
            }
            var n = e.data,
                r = new Prism(n.options),
                a = r.refract(n.code, n.lang);
            return n.isNode ? (t(), void self.close()) : void setTimeout(function() {
                t()
            }, 1e3 * n.options.delay)
        }

        function f() {
            return (R || null === j) && (j = c(l, Prism)), j
        }

        function d(e, t) {
            function n(a) {
                a.data.id === e.id && (t(a.data), r.removeEventListener("message", n))
            }
            var r = f();
            r.addEventListener("message", n), r.postMessage(e)
        }

        function g(e, t, n) {
            return function(r) {
                e.innerHTML = r.result, e.classList.remove("loading"), e.classList.add("rainbow-show"), "PRE" === e.parentNode.tagName && (e.parentNode.classList.remove("loading"), e.parentNode.classList.add("rainbow-show")), M && M(e, r.lang), 0 === --t.c && n()
            }
        }

        function m(e) {
            return {
                patterns: C,
                inheritenceMap: S,
                aliases: T,
                globalClass: e.globalClass,
                delay: isNaN(e.delay) ? 0 : e.delay
            }
        }

        function v(e, t) {
            var n = {};
            "object" == typeof t && (n = t, t = n.language), t = T[t] || t;
            var r = {
                id: A++,
                code: e,
                lang: t,
                options: m(n),
                isNode: R
            };
            return r
        }

        function p(e, t) {
            for (var r = {
                c: 0
            }, a = 0, o = e; a < o.length; a += 1) {
                var i = o[a],
                    s = n(i);
                if (!i.classList.contains("rainbow") && s) {
                    i.classList.add("loading"), i.classList.add("rainbow"), "PRE" === i.parentNode.tagName && i.parentNode.classList.add("loading");
                    var u = i.getAttribute("data-global-class"),
                        c = parseInt(i.getAttribute("data-delay"), 10);
                    ++r.c, d(v(i.innerHTML, {
                        language: s,
                        globalClass: u,
                        delay: c
                    }), g(i, r, t))
                }
            }
            0 === r.c && t()
        }

        function h(e) {
            var t = document.createElement("div");
            t.className = "preloader";
            for (var n = 0; n < 7; n++) t.appendChild(document.createElement("div"));
            e.appendChild(t)
        }

        function b(e, t) {
            t = t || function() {}, e = e && "function" == typeof e.getElementsByTagName ? e : document;
            for (var n = e.getElementsByTagName("pre"), r = e.getElementsByTagName("code"), a = [], o = [], i = 0, s = n; i < s.length; i += 1) {
                var u = s[i];
                h(u), u.getElementsByTagName("code").length ? u.getAttribute("data-trimmed") || (u.setAttribute("data-trimmed", !0), u.innerHTML = u.innerHTML.trim()) : a.push(u)
            }
            for (var c = 0, l = r; c < l.length; c += 1) {
                var f = l[c];
                o.push(f)
            }
            p(o.concat(a), t)
        }

        function w(e) {
            M = e
        }

        function y(e, t, n) {
            S[e] || (S[e] = n), C[e] = t.concat(C[e] || [])
        }

        function L(e) {
            delete S[e], delete C[e]
        }

        function N() {
            for (var e = [], t = arguments.length; t--;) e[t] = arguments[t];
            if ("string" == typeof e[0]) {
                var n = v(e[0], e[1]);
                return void d(n, function(e) {
                    return function(t) {
                        e && e(t.result, t.lang)
                    }
                }(e[2]))
            }
            return "function" == typeof e[0] ? void b(0, e[0]) : void b(e[0], e[1])
        }

        function E(e, t) {
            T[e] = t
        }
        var M, Prism = function Prism(e) {
                function t(e, t) {
                    for (var n in h)
                        if (n = parseInt(n, 10), r(n, h[n], e, t) && (delete h[n], delete p[n]), i(n, h[n], e, t)) return !0;
                    return !1
                }

                function n(t, n) {
                    var r = t.replace(/\./g, " "),
                        a = e.globalClass;
                    return a && (r += " " + a), '<span class="' + r + '">' + n + "</span>"
                }

                function c(e) {
                    for (var t = s(p), n = 0, r = t; n < r.length; n += 1) {
                        var a = r[n],
                            o = p[a];
                        e = u(a, o.replace, o["with"], e)
                    }
                    return e
                }

                function l(e) {
                    var t = "";
                    return e.ignoreCase && (t += "i"), e.multiline && (t += "m"), new RegExp(e.source, t)
                }

                function f(r, a, i) {
                    function c(e) {
                        return r.name && (e = n(r.name, e)), p[w] = {
                            replace: m[0],
                            "with": e
                        }, h[w] = y, !g && {
                            remaining: a.substr(y - i),
                            offset: y
                        }
                    }

                    function f(t) {
                        var a = m[t];
                        if (a) {
                            var i = r.matches[t],
                                s = i.language,
                                c = i.name && i.matches ? i.matches : i,
                                l = function(e, r, a) {
                                    b = u(o(m, t), e, a ? n(a, r) : r, b)
                                };
                            if ("string" == typeof i) return void l(a, a, i);
                            var f, d = new Prism(e);
                            if (s) return f = d.refract(a, s), void l(a, f);
                            f = d.refract(a, v, c.length ? c : [c]), l(a, f, i.matches ? i.name : 0)
                        }
                    }
                    void 0 === i && (i = 0);
                    var d = r.pattern;
                    if (!d) return !1;
                    var g = !d.global;
                    d = l(d);
                    var m = d.exec(a);
                    if (!m) return !1;
                    !r.name && r.matches && "string" == typeof r.matches[0] && (r.name = r.matches[0], delete r.matches[0]);
                    var b = m[0],
                        w = m.index + i,
                        y = m[0].length + w;
                    if (w === y) return !1;
                    if (t(w, y)) return {
                        remaining: a.substr(y - i),
                        offset: y
                    };
                    for (var L = s(r.matches), N = 0, E = L; N < E.length; N += 1) {
                        var M = E[N];
                        f(M)
                    }
                    return c(b)
                }

                function d(e, t) {
                    for (var n = 0, r = t; n < r.length; n += 1)
                        for (var a = r[n], o = f(a, e); o;) o = f(a, o.remaining, o.offset);
                    return c(e)
                }

                function g(t) {
                    for (var n = e.patterns[t] || []; e.inheritenceMap[t];) t = e.inheritenceMap[t], n = n.concat(e.patterns[t] || []);
                    return n
                }

                function m(e, t, n) {
                    return v = t, n = n || g(t), d(a(e), n)
                }
                var v, p = {},
                    h = {};
                this.refract = m
            },
            C = {},
            S = {},
            T = {},
            x = {},
            A = 0,
            R = e(),
            k = t(),
            j = null;
        x = {
            extend: y,
            remove: L,
            onHighlight: w,
            addAlias: E,
            color: N
        }, R && (x.colorSync = function(e, t) {
            var n = v(e, t),
                r = new Prism(n.options);
            return r.refract(n.code, n.lang)
        }), R || k || document.addEventListener("DOMContentLoaded", function(e) {
            x.defer || x.color(e)
        }, !1), k && (self.onmessage = l);
        var B = x;
        return B
    });
        Rainbow.extend("c", [{
            name: "meta.preprocessor",
            matches: {
                1: [{
                    matches: {
                        1: "keyword.define",
                        2: "entity.name"
                    },
                    pattern: /(\w+)\s(\w+)\b/g
                }, {
                    name: "keyword.define",
                    pattern: /endif/g
                }, {
                    name: "constant.numeric",
                    pattern: /\d+/g
                }, {
                    matches: {
                        1: "keyword.include",
                        2: "string"
                    },
                    pattern: /(include)\s(.*?)$/g
                }]
            },
            pattern: /\#([\S\s]*?)$/gm
        }, {
            name: "keyword",
            pattern: /\b(do|goto|typedef)\b/g
        }, {
            name: "entity.label",
            pattern: /\w+:/g
        }, {
            matches: {
                1: "storage.type",
                3: "storage.type",
                4: "entity.name.function"
            },
            pattern: /\b((un)?signed|const)? ?(void|char|short|int|long|float|double)\*? +((\w+)(?= ?\())?/g
        }, {
            matches: {
                2: "entity.name.function"
            },
            pattern: /(\w|\*) +((\w+)(?= ?\())/g
        }, {
            name: "storage.modifier",
            pattern: /\b(static|extern|auto|register|volatile|inline)\b/g
        }, {
            name: "support.type",
            pattern: /\b(struct|union|enum)\b/g
        }], "generic"), Rainbow.extend("generic", [{
            matches: {
                1: [{
                    name: "keyword.operator",
                    pattern: /\=|\+/g
                }, {
                    name: "keyword.dot",
                    pattern: /\./g
                }],
                2: {
                    name: "string",
                    matches: {
                        name: "constant.character.escape",
                        pattern: /\\('|"){1}/g
                    }
                }
            },
            pattern: /(\(|\s|\[|\=|:|\+|\.|\{|,)(('|")([^\\\1]|\\.)*?(\3))/gm
        }, {
            name: "comment",
            pattern: /\/\*[\s\S]*?\*\/|(\/\/|\#)(?!.*('|").*?[^:](\/\/|\#)).*?$/gm
        }, {
            name: "constant.numeric",
            pattern: /\b(\d+(\.\d+)?(e(\+|\-)?\d+)?(f|d)?|0x[\da-f]+)\b/gi
        }, {
            matches: {
                1: "keyword"
            },
            pattern: /\b(and|array|as|b(ool(ean)?|reak)|c(ase|atch|har|lass|on(st|tinue))|d(ef|elete|o(uble)?)|e(cho|lse(if)?|xit|xtends|xcept)|f(inally|loat|or(each)?|unction)|global|if|import|int(eger)?|long|new|object|or|pr(int|ivate|otected)|public|return|self|st(ring|ruct|atic)|switch|th(en|is|row)|try|(un)?signed|var|void|while)(?=\b)/gi
        }, {
            name: "constant.language",
            pattern: /true|false|null/g
        }, {
            name: "keyword.operator",
            pattern: /\+|\!|\-|&(gt|lt|amp);|\||\*|\=/g
        }, {
            matches: {
                1: "function.call"
            },
            pattern: /(\w+?)(?=\()/g
        }, {
            matches: {
                1: "storage.function",
                2: "entity.name.function"
            },
            pattern: /(function)\s(.*?)(?=\()/g
        }]), Rainbow.extend("java", [{
            name: "constant",
            pattern: /\b(false|null|true|[A-Z_]+)\b/g
        }, {
            matches: {
                1: "keyword",
                2: "support.namespace"
            },
            pattern: /(import|package)\s(.+)/g
        }, {
            name: "keyword",
            pattern: /\b(abstract|assert|boolean|break|byte|case|catch|char|class|const|continue|default|do|double|else|enum|extends|final|finally|float|for|goto|if|implements|import|instanceof|int|interface|long|native|new|package|private|protected|public|return|short|static|strictfp|super|switch|synchronized|this|throw|throws|transient|try|void|volatile|while)\b/g
        }, {
            name: "string",
            pattern: /(".*?")/g
        }, {
            name: "char",
            pattern: /(')(.|\\.|\\u[\dA-Fa-f]{4})\1/g
        }, {
            name: "integer",
            pattern: /\b(0x[\da-f]+|\d+)L?\b/g
        }, {
            name: "comment",
            pattern: /\/\*[\s\S]*?\*\/|(\/\/).*?$/gm
        }, {
            name: "support.annotation",
            pattern: /@\w+/g
        }, {
            matches: {
                1: "entity.function"
            },
            pattern: /([^@\.\s]+)\(/g
        }, {
            name: "entity.class",
            pattern: /\b([A-Z]\w*)\b/g
        }, {
            name: "operator",
            pattern: /(\+{1,2}|-{1,2}|~|!|\*|\/|%|(?:&lt;){1,2}|(?:&gt;){1,3}|instanceof|(?:&amp;){1,2}|\^|\|{1,2}|\?|:|(?:=|!|\+|-|\*|\/|%|\^|\||(?:&lt;){1,2}|(?:&gt;){1,3})?=)/g
        }]), Rainbow.extend("javascript", [{
            name: "selector",
            pattern: /\$(?=\.|\()/g
        }, {
            name: "support",
            pattern: /\b(window|document)\b/g
        }, {
            name: "keyword",
            pattern: /\b(export|default|from)\b/g
        }, {
            name: "function.call",
            pattern: /\b(then)(?=\()/g
        }, {
            name: "variable.language.this",
            pattern: /\bthis\b/g
        }, {
            name: "variable.language.super",
            pattern: /super(?=\.|\()/g
        }, {
            name: "storage.type",
            pattern: /\b(const|let|var)(?=\s)/g
        }, {
            matches: {
                1: "support.property"
            },
            pattern: /\.(length|node(Name|Value))\b/g
        }, {
            matches: {
                1: "support.function"
            },
            pattern: /(setTimeout|setInterval)(?=\()/g
        }, {
            matches: {
                1: "support.method"
            },
            pattern: /\.(getAttribute|replace|push|getElementById|getElementsByClassName|setTimeout|setInterval)(?=\()/g
        }, {
            name: "string.regexp",
            matches: {
                1: "string.regexp.open",
                2: {
                    name: "constant.regexp.escape",
                    pattern: /\\(.){1}/g
                },
                3: "string.regexp.close",
                4: "string.regexp.modifier"
            },
            pattern: /(\/)((?![*+?])(?:[^\r\n\[\/\\]|\\.|\[(?:[^\r\n\]\\]|\\.)*\])+)(\/)(?!\/)([igm]{0,3})/g
        }, {
            matches: {
                1: "storage.type",
                3: "entity.function"
            },
            pattern: /(var)?(\s|^)(\S+)(?=\s?=\s?function\()/g
        }, {
            matches: {
                1: "keyword",
                2: "variable.type"
            },
            pattern: /(new)\s+(?!Promise)([^\(]*)(?=\()/g
        }, {
            name: "entity.function",
            pattern: /(\w+)(?=:\s{0,}function)/g
        }, {
            name: "constant.other",
            pattern: /\*(?= as)/g
        }, {
            matches: {
                1: "keyword",
                2: "constant.other"
            },
            pattern: /(export)\s+(\*)/g
        }, {
            matches: {
                1: "storage.type.accessor",
                2: "entity.name.function"
            },
            pattern: /(get|set)\s+(\w+)(?=\()/g
        }, {
            matches: {
                2: "entity.name.function"
            },
            pattern: /(^\s*)(\w+)(?=\([^\)]*?\)\s*\{)/gm
        }, {
            matches: {
                1: "storage.type.class",
                2: "entity.name.class",
                3: "storage.modifier.extends",
                4: "entity.other.inherited-class"
            },
            pattern: /(class)\s+(\w+)(?:\s+(extends)\s+(\w+))?(?=\s*\{)/g
        }, {
            name: "storage.type.function.arrow",
            pattern: /=&gt;/g
        }, {
            name: "support.class.promise",
            pattern: /\bPromise(?=(\(|\.))/g
        }], "generic"), Rainbow.addAlias("js", "javascript"), Rainbow.extend("python", [{
            name: "variable.self",
            pattern: /self/g
        }, {
            name: "constant.language",
            pattern: /None|True|False|NotImplemented|\.\.\./g
        }, {
            name: "support.object",
            pattern: /object/g
        }, {
            name: "support.function.python",
            pattern: /\b(bs|divmod|input|open|staticmethod|all|enumerate|int|ord|str|any|eval|isinstance|pow|sum|basestring|execfile|issubclass|print|super|bin|file|iter|property|tuple|bool|filter|len|range|type|bytearray|float|list|raw_input|unichr|callable|format|locals|reduce|unicode|chr|frozenset|long|reload|vars|classmethod|getattr|map|repr|xrange|cmp|globals|max|reversed|zip|compile|hasattr|memoryview|round|__import__|complex|hash|min|set|apply|delattr|help|next|setattr|buffer|dict|hex|object|slice|coerce|dir|id|oct|sorted|intern)(?=\()/g
        }, {
            matches: {
                1: "keyword"
            },
            pattern: /\b(pass|lambda|with|is|not|in|from|elif|raise|del)(?=\b)/g
        }, {
            matches: {
                1: "storage.class",
                2: "entity.name.class",
                3: "entity.other.inherited-class"
            },
            pattern: /(class)\s+(\w+)\((\w+?)\)/g
        }, {
            matches: {
                1: "storage.function",
                2: "support.magic"
            },
            pattern: /(def)\s+(__\w+)(?=\()/g
        }, {
            name: "support.magic",
            pattern: /__(name)__/g
        }, {
            matches: {
                1: "keyword.control",
                2: "support.exception.type"
            },
            pattern: /(except) (\w+):/g
        }, {
            matches: {
                1: "storage.function",
                2: "entity.name.function"
            },
            pattern: /(def)\s+(\w+)(?=\()/g
        }, {
            name: "entity.name.function.decorator",
            pattern: /@([\w\.]+)/g
        }, {
            name: "comment.docstring",
            pattern: /('{3}|"{3})[\s\S]*?\1/gm
        }], "generic");
    }

    function hslToHex(h, s, l) {
        l /= 100;
        const a = s * Math.min(l, 1 - l) / 100;
        const f = n => {
            const k = (n + h / 30) % 12;
            const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);
            return Math.round(255 * color).toString(16).padStart(2, '0');   // convert to Hex and prefix "0" if needed
        };
        return `#${f(0)}${f(8)}${f(4)}`;
    }

    function loadFunction(){
        base_scores = []
        const newcircles= document.querySelectorAll('div[role="progressbar"]');
        for (let i = 0; i < newcircles.length; i++) {
            newcircles[i].style.setProperty('--fg', `hsl(${getComputedStyle(newcircles[i]).getPropertyValue('--value')}, 100%, 50%)`)
            newcircles[i].oninput =_=> newcircles[i].style.setProperty('--fg', `hsl(${getComputedStyle(newcircles[i]).getPropertyValue('--value')}, 100%, 50%)`)
        }

        var complexity_scores = JSON.parse('<%- JSON.stringify(focus_file.complexity_scores) %>');
        var coupling_scores = JSON.parse('<%- JSON.stringify(focus_file.coupling_scores) %>');
        var cohesion_scores = JSON.parse('<%- JSON.stringify(focus_file.cohesion_scores) %>');
        var naming_scores = JSON.parse('<%- JSON.stringify(focus_file.naming_scores) %>');
        var general_scores = JSON.parse('<%- JSON.stringify(focus_file.general_scores) %>');

        base_scores = base_scores.concat(complexity_scores, coupling_scores, cohesion_scores, naming_scores, general_scores);

        const score_list= document.querySelectorAll('td[class=score]')
        for (let i = 0; i < score_list.length; i++) {
            //console.log(score_list[i].innerHTML)
            score_list[i].style.setProperty('background-color', `hsl(${score_list[i].innerHTML}, 100%, 50%)`)
        }

        am4core.ready(function() {
            am4core.useTheme(am4themes_animated);

            var chart = am4core.create("chartdiv", am4charts.PieChart);

            // Let's cut a hole in our Pie chart the size of 40% the radius
            chart.innerRadius = am4core.percent(40);

            var chart_scale = 0.97;

            // Add data
            chart.data = [{
                "Complexity": "CC",
                "complexity_score":getComputedStyle(newcircles[0]).getPropertyValue('--value'),
                "color": am4core.color(hslToHex(getComputedStyle(newcircles[0]).getPropertyValue('--value'),100,50))
            }, {
                "Complexity": "LOC",
                "complexity_score":getComputedStyle(newcircles[1]).getPropertyValue('--value'),
                "color": am4core.color(hslToHex(getComputedStyle(newcircles[1]).getPropertyValue('--value'),100,50))
            }, {
                "Complexity": "WMC",
                "complexity_score":getComputedStyle(newcircles[2]).getPropertyValue('--value'),
                "color": am4core.color(hslToHex(getComputedStyle(newcircles[2]).getPropertyValue('--value'),100,50))
            }, {
                "Complexity": "ABC",
                "complexity_score":getComputedStyle(newcircles[3]).getPropertyValue('--value'),
                "color": am4core.color(hslToHex(getComputedStyle(newcircles[3]).getPropertyValue('--value'),100,50))
            }, {
                "Coupling": "COF",
                "coupling_score": getComputedStyle(newcircles[4]).getPropertyValue('--value'),
                "color": am4core.color(hslToHex(getComputedStyle(newcircles[4]).getPropertyValue('--value'),100,50))
            }, {
                "Coupling": "CBO",
                "coupling_score": getComputedStyle(newcircles[5]).getPropertyValue('--value'),
                "color": am4core.color(hslToHex(getComputedStyle(newcircles[5]).getPropertyValue('--value'),100,50))
            }, {
                "Cohesion": "DIT",
                "cohesion_score": getComputedStyle(newcircles[6]).getPropertyValue('--value'),
                "color": am4core.color(hslToHex(getComputedStyle(newcircles[6]).getPropertyValue('--value'),100,50))
            }, {
                "Cohesion": "MHF",
                "cohesion_score": getComputedStyle(newcircles[7]).getPropertyValue('--value'),
                "color": am4core.color(hslToHex(getComputedStyle(newcircles[7]).getPropertyValue('--value'),100,50))
            }, {
                "Cohesion": "AHF",
                "cohesion_score": getComputedStyle(newcircles[8]).getPropertyValue('--value'),
                "color": am4core.color(hslToHex(getComputedStyle(newcircles[8]).getPropertyValue('--value'),100,50))
            }];

            // Add and configure Series
            var pieSeries = chart.series.push(new am4charts.PieSeries());
            pieSeries.slices.template.propertyFields.fill = "color";
            pieSeries.dataFields.value = "complexity_score";
            pieSeries.dataFields.category = "Complexity";
            pieSeries.slices.template.stroke = am4core.color("#fff");
            pieSeries.slices.template.strokeWidth = 2;
            pieSeries.slices.template.strokeOpacity = 1;
            // Disabling labels and ticks on inner circle
            pieSeries.labels.template.disabled = true;
            pieSeries.ticks.template.disabled = true;
            // Disable sliding out of slices
            pieSeries.slices.template.states.getKey("hover").properties.shiftRadius = 0;
            pieSeries.slices.template.states.getKey("hover").properties.scale = chart_scale;

            // Add second series
            var pieSeries2 = chart.series.push(new am4charts.PieSeries());
            pieSeries2.slices.template.propertyFields.fill = "color";
            pieSeries2.dataFields.value = "coupling_score";
            pieSeries2.dataFields.category = "Coupling";
            pieSeries2.slices.template.stroke = am4core.color("#fff");
            pieSeries2.slices.template.strokeWidth = 2;
            pieSeries2.slices.template.strokeOpacity = 1;
            // Disabling labels and ticks on inner circle
            pieSeries2.labels.template.disabled = true;
            pieSeries2.ticks.template.disabled = true;
            // Disable sliding out of slices
            pieSeries2.slices.template.states.getKey("hover").properties.shiftRadius = 0;
            pieSeries2.slices.template.states.getKey("hover").properties.scale = chart_scale;

            var pieSeries3 = chart.series.push(new am4charts.PieSeries());
            pieSeries3.slices.template.propertyFields.fill = "color";
            pieSeries3.dataFields.value = "cohesion_score";
            pieSeries3.dataFields.category = "Cohesion";
            pieSeries3.slices.template.stroke = am4core.color("#fff");
            pieSeries3.slices.template.strokeWidth = 2;
            pieSeries3.slices.template.strokeOpacity = 1;
            // Disabling labels and ticks on inner circle
            pieSeries3.labels.template.disabled = true;
            pieSeries3.ticks.template.disabled = true;
            // Disable sliding out of slices
            pieSeries3.slices.template.states.getKey("hover").properties.shiftRadius = 0;
            pieSeries3.slices.template.states.getKey("hover").properties.scale = chart_scale;

            var chart2 = am4core.create("chartdiv2", am4charts.PieChart);

            // Let's cut a hole in our Pie chart the size of 40% the radius
            chart2.innerRadius = am4core.percent(40);

            chart2.data = chart.data;

            var pieSeriesBig = chart2.series.push(new am4charts.PieSeries());
            pieSeriesBig.slices.template.propertyFields.fill = "color";
            pieSeriesBig.dataFields.value = "complexity_score";
            pieSeriesBig.dataFields.category = "Complexity";
            pieSeriesBig.slices.template.stroke = am4core.color("#fff");
            pieSeriesBig.slices.template.strokeWidth = 2;
            pieSeriesBig.slices.template.strokeOpacity = 1;
            // Disabling labels and ticks on inner circle
            pieSeriesBig.labels.template.disabled = true;
            pieSeriesBig.ticks.template.disabled = true;
            // Disable sliding out of slices
            pieSeriesBig.slices.template.states.getKey("hover").properties.shiftRadius = 0;
            pieSeriesBig.slices.template.states.getKey("hover").properties.scale = chart_scale;

            // Add second series
            var pieSeriesBig2 = chart2.series.push(new am4charts.PieSeries());
            pieSeriesBig2.slices.template.propertyFields.fill = "color";
            pieSeriesBig2.dataFields.value = "coupling_score";
            pieSeriesBig2.dataFields.category = "Coupling";
            pieSeriesBig2.slices.template.stroke = am4core.color("#fff");
            pieSeriesBig2.slices.template.strokeWidth = 2;
            pieSeriesBig2.slices.template.strokeOpacity = 1;
            // Disabling labels and ticks on inner circle
            pieSeriesBig2.labels.template.disabled = true;
            pieSeriesBig2.ticks.template.disabled = true;
            // Disable sliding out of slices
            pieSeriesBig2.slices.template.states.getKey("hover").properties.shiftRadius = 0;
            pieSeriesBig2.slices.template.states.getKey("hover").properties.scale = chart_scale;

            var pieSeriesBig3 = chart2.series.push(new am4charts.PieSeries());
            pieSeriesBig3.slices.template.propertyFields.fill = "color";
            pieSeriesBig3.dataFields.value = "cohesion_score";
            pieSeriesBig3.dataFields.category = "Cohesion";
            pieSeriesBig3.slices.template.stroke = am4core.color("#fff");
            pieSeriesBig3.slices.template.strokeWidth = 2;
            pieSeriesBig3.slices.template.strokeOpacity = 1;
            // Disabling labels and ticks on inner circle
            pieSeriesBig3.labels.template.disabled = true;
            pieSeriesBig3.ticks.template.disabled = true;
            // Disable sliding out of slices
            pieSeriesBig3.slices.template.states.getKey("hover").properties.shiftRadius = 0;
            pieSeriesBig3.slices.template.states.getKey("hover").properties.scale = chart_scale;

            chart2.legend = new am4charts.Legend();
        }); // end am4core.ready()
    }
</script>
<body onload="loadFunction()">
    <div id="gradebook_header" class="subheadContent">
        <div class="subheadContent subheadContent--flex-start">
            <div class="assignmentDetails">
                <a id="assignment_url" href="/courses/2173881/assignments/13793262" class="a-style">
                    <h2 class="assignmentDetails__Title">Assignment Name</h2>
                </a>
                <p class="assignmentDetails__Info">
                    <span>Due: Month Day, Year at Time</span>
                    - <a id="context_title" href="/courses/2173881" class="a-style">Course Name, Section #: Title </a>
                </p>
            </div>
        </div>
        <div class="subheadContent subheadContent--flex-end">
            <div class="statsMetric">
                <div class="statsMetric__Item">
                    <div class="statsMetric__Item-value" id="x_of_x_graded">32/33</div>
                    <div class="statsMetric__Item-label">Graded</div>
                </div>
                <div class="statsMetric__Item">
                    <div class="statsMetric__Item-value" id="x_of_x_students_frd">1/33</div>
                    <div class="statsMetric__Item-label" id="gradee"></div>
                </div>
            </div>
            <div class="studentSelection">
                <form action="http://localhost:3000/next_student" method="post">
                    <label>
                        <input class="secret3" name="next_student" value="<%=prev_student.studentID%>">
                    </label>
                    <% for (let i = 0; i < focus_file.coupling_scores.length + focus_file.cohesion_scores.length +focus_file.complexity_scores.length; i++) { %>
                    <label>
                        <input class="prev_student_hidden" name='prev_student_hidden' value=<%=threshold_list[i]%>>
                    </label>
                    <% } %>
                    <% for (let i = 0; i < focus_file.general_scores.length + focus_file.naming_scores.length; i++) { %>
                    <label>
                        <input class="prev_student_hidden" name='prev_student_hidden' value=<%=threshold_list[i+focus_file.coupling_scores.length + focus_file.cohesion_scores.length +focus_file.complexity_scores.length]%>>
                    </label>
                    <% } %>
                    <button id="prev-student-button" class="Button Button--icon-action gradebookMoveToNext prev" aria-label="Previous" type="submit">
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-arrow-left-short" viewBox="0 0 16 16">
                            <path fill-rule="evenodd" d="M12 8a.5.5 0 0 1-.5.5H5.707l2.147 2.146a.5.5 0 0 1-.708.708l-3-3a.5.5 0 0 1 0-.708l3-3a.5.5 0 1 1 .708.708L5.707 7.5H11.5a.5.5 0 0 1 .5.5z"/>
                        </svg>
                    </button>
                </form>
                <form action="http://localhost:3000/change_student" method="post">
                    <select name="student_list" id="student-list" class="student-selection-class" onchange="this.form.submit()">
                        <% for (let i = 0; i < student_list.length; i++) { %>
                            <% if(selected_student == student_list[i]){%>
                                <option value="<%= student_list[i].studentID %>" class="other-student" selected><%= student_list[i].name %></option>
                            <%}else{%>
                                <option value="<%= student_list[i].studentID %>" class="other-student"><%= student_list[i].name %></option>
                            <%}%>
                        <% } %>
                    </select>
                    <% for (let i = 0; i < focus_file.coupling_scores.length + focus_file.cohesion_scores.length +focus_file.complexity_scores.length; i++) { %>
                    <label>
                        <input class="change_student_secret" name='test' value=<%=threshold_list[i]%>>
                    </label>
                    <% } %>
                    <% for (let i = 0; i < focus_file.general_scores.length + focus_file.naming_scores.length; i++) { %>
                    <label>
                        <input class="change_student_secret" name='test' value=<%=threshold_list[i+focus_file.coupling_scores.length + focus_file.cohesion_scores.length +focus_file.complexity_scores.length]%>>
                    </label>
                    <% } %>
                </form>
                <form action="http://localhost:3000/next_student" method="post">
                    <label>
                        <input class="secret3" name="next_student" value="<%=next_student.studentID%>">
                    </label>
                    <button id="next-student-button" class="Button Button--icon-action gradebookMoveToNext next" aria-label="Next" type="submit">
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-arrow-right-short" viewBox="0 0 16 16">
                            <path fill-rule="evenodd" d="M4 8a.5.5 0 0 1 .5-.5h5.793L8.146 5.354a.5.5 0 1 1 .708-.708l3 3a.5.5 0 0 1 0 .708l-3 3a.5.5 0 0 1-.708-.708L10.293 8.5H4.5A.5.5 0 0 1 4 8z"/>
                        </svg>
                    </button>
                    <% for (let i = 0; i < focus_file.coupling_scores.length + focus_file.cohesion_scores.length +focus_file.complexity_scores.length; i++) { %>
                    <label>
                        <input class="next_student_hidden" name='next_student_hidden' value=<%=threshold_list[i]%>>
                    </label>
                    <% } %>
                    <% for (let i = 0; i < focus_file.general_scores.length + focus_file.naming_scores.length; i++) { %>
                    <label>
                        <input class="next_student_hidden" name='next_student_hidden' value=<%=threshold_list[i+focus_file.coupling_scores.length + focus_file.cohesion_scores.length +focus_file.complexity_scores.length]%>>
                    </label>
                    <% } %>
                </form>
            </div>
        </div>
    </div>
    <div class="cma-popup" id="cma_form">
        <div id="outer-grid-summary">
            <div id="inner-grid-summary">
                <div class="summary-table">
                    <table>
                        <tr>
                            <th colspan="12">CMA Metric Analysis Report</th>
                        </tr>

                        <tr>
                            <th colspan="3"></th>
                            <th colspan="2">General</th>
                            <th colspan="3">Naming Conventions</th>
                        </tr>

                        <tr>
                            <td>Student Name</td>
                            <td>Student ID</td>
                            <td>File</td>
                            <td>Comment Percentage (CP)</td>
                            <td>Token Count (TC)</td>
                            <td>Class</td>
                            <td>Method</td>
                            <td>Variable</td>
                        </tr>
                        <% for (let i = 0; i < student_list.length; i++) { %>
                            <% for (let j = 0; j < student_list[i].submission.file_list.length; j++) { %>
                            <tr>
                                <%if(j == 0){%>
                                    <td>
                                        <%= student_list[i].name %>
                                    </td>
                                    <td>
                                        <%= student_list[i].studentID %>
                                    </td>
                                <%}else{%>
                                    <td></td>
                                    <td></td>
                                <%}%>
                                <td class="cutoff">
                                    <%= student_list[i].submission.file_list[j].name%>
                                </td>
                                <% for (let k = 0; k < student_list[i].submission.file_list[j].general_scores.length; k++) { %>
                                <td class="score">
                                    <%=student_list[i].submission.file_list[j].general_scores[k]%>
                                </td>
                                <% } %>
                                <% for (let k = 0; k < student_list[i].submission.file_list[j].naming_scores.length; k++) { %>
                                <td class="score">
                                    <%=student_list[i].submission.file_list[j].naming_scores[k]%>
                                </td>
                                <% } %>
                            </tr>
                            <% } %>
                        <% } %>
                    </table>
                </div>
            </div>
            <div id="inner-grid-summary">
                <div>
                    <table>
                        <tr>
                            <th colspan="2">CMA Summary Observations</th>
                        </tr>
                    </table>
                </div>
            </div>
        </div>
        <button type="button" class="btn cancel ui-button-close" onclick="close_cma_form()">Close Summary</button>
    </div>
    <div class="qma-popup" id="qma_form">
        <div id="outer-grid-summary">
            <div id="inner-grid-summary">
                <div class="summary-table">
                    <table>
                        <tr>
                            <th colspan="12">QMA Metric Analysis Report</th>
                        </tr>

                        <tr>
                            <th colspan="3"></th>
                            <th colspan="4">Complexity</th>
                            <th colspan="2">Coupling</th>
                            <th colspan="3">Cohesion</th>
                        </tr>

                        <tr>
                            <td>Student Name</td>
                            <td>Student ID</td>
                            <td>File</td>
                            <td>Cyclomatic Complexity (CC)</td>
                            <td>Lines of Code (LOC)</td>
                            <td>Weighted Methods per Class (WMC)</td>
                            <td>ABC</td>
                            <td>Coupling Factor (COF)</td>
                            <td>Coupling between objects (CBO)</td>
                            <td>Depth of Inheritance (DIT)</td>
                            <td>Method Hiding Factor (MHF)</td>
                            <td>Attribute Hiding Factor (AHF)</td>
                        </tr>
                        <% for (let i = 0; i < student_list.length; i++) { %>
                            <% for (let j = 0; j < student_list[i].submission.file_list.length; j++) { %>
                            <tr>
                                <%if(j == 0){%>
                                    <td class="cutoff">
                                        <%= student_list[i].name %>
                                    </td>
                                    <td>
                                        <%= student_list[i].studentID %>
                                    </td>
                                <%}else{%>
                                    <td></td>
                                    <td></td>
                                <%}%>
                                <td class="cutoff">
                                    <%= student_list[i].submission.file_list[j].name%>
                                </td>
                                <% for (let k = 0; k < student_list[i].submission.file_list[j].complexity_scores.length; k++) { %>
                                <td class="score">
                                    <%=student_list[i].submission.file_list[j].complexity_scores[k]%>
                                </td>
                                <% } %>
                                <% for (let k = 0; k < student_list[i].submission.file_list[j].coupling_scores.length; k++) { %>
                                <td class="score">
                                    <%=student_list[i].submission.file_list[j].coupling_scores[k]%>
                                </td>
                                <% } %>
                                <% for (let k = 0; k < student_list[i].submission.file_list[j].cohesion_scores.length; k++) { %>
                                <td class="score">
                                    <%=student_list[i].submission.file_list[j].cohesion_scores[k]%>
                                </td>
                                <% } %>
                            </tr>
                            <% } %>
                        <% } %>
                    </table>
                </div>
            </div>
            <div id="inner-grid-summary">
                <div>
                    <table>
                        <tr>
                            <th colspan="2">QMA Summary Observations</th>
                        </tr>
                    </table>
                </div>
            </div>
        </div>
        <button type="button" class="btn cancel ui-button-close" onclick="close_qma_form()">Close Summary</button>
    </div>
    <div class="pie_chart_popup"  id="pie_chart_form">
        <button class="pie_chart_button" onclick="close_pie_chart()" style="width: 100%; height: 100%;">
            <div id="chartdiv2"></div>
        </button>
    </div>
    <div id="main-page">
        <div class="menu">
            <div class="title">THRESHOLDS <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-caret-up-fill" viewBox="0 0 16 16">
                    <path d="m7.247 4.86-4.796 5.481c-.566.647-.106 1.659.753 1.659h9.592a1 1 0 0 0 .753-1.659l-4.796-5.48a1 1 0 0 0-1.506 0z"/>
                </svg></div>
            <ul class="nav">
                <li style="padding-top: 5%;"><div><span><b>QMA Thresholds</b></span></div></li>
                <li>
                    <table class="threshold-table">
                        <tr>
                            <td class="threshold-table-tab">
                                <b>Complexity</b>
                            </td>
                        </tr>
                        <% for (let i = 0; i < focus_file.complexity_scores.length; i++) { %>
                            <tr>
                                <td class="threshold-table-content">
                                    <%= complexity_names[i] %>
                                </td>
                                <td>
                                    <div class="slider qma-threshold-update">
                                        <input type="range" id="rangeInput" name="rangeInput" class=<%='s'+(i+1)%> min="0" max="100" value=<%=threshold_list[i]%> onchange="updateTextInput(this.parentNode);">
                                        <input type="text" value=<%=threshold_list[i]%> id="textInput" class="slider-value <%='s'+(i+1)%>" onchange="updateSlider(this.parentNode);">
                                    </div>
                                </td>
                            </tr>
                        <% } %>

                        <tr>
                            <td class="threshold-table-tab">
                                <b>Coupling</b>
                            </td>
                        </tr>
                        <% for (let i = 0; i < focus_file.coupling_scores.length; i++) { %>
                            <tr>
                                <td class="threshold-table-content" style="width: 40%;">
                                    <%= coupling_names[i] %>
                                </td>
                                <td>
                                    <div class="slider qma-threshold-update">
                                        <input type="range" id="rangeInput" name="rangeInput" class=<%='s'+(i+1+focus_file.complexity_scores.length)%> min="0" max="100" value=<%=threshold_list[i+focus_file.complexity_scores.length]%> onchange="updateTextInput(this.parentNode);">
                                        <input type="text" value=<%=threshold_list[i+focus_file.complexity_scores.length]%> id="textInput" class="slider-value <%='s'+(i+1+focus_file.complexity_scores.length)%>" onchange="updateSlider(this.parentNode);">
                                    </div>
                                </td>
                            </tr>
                        <% } %>

                        <tr>
                            <td class="threshold-table-tab">
                                <b>Cohesion</b>
                            </td>
                        </tr>
                        <% for (let i = 0; i < focus_file.cohesion_scores.length; i++) { %>
                            <tr>
                                <td class="threshold-table-content" style="width: 40%;">
                                    <%= cohesion_names[i] %>
                                </td>
                                <td>
                                    <div class="slider qma-threshold-update">
                                        <input type="range" id="rangeInput" name="rangeInput" class=<%='s'+(i+1+focus_file.complexity_scores.length+focus_file.coupling_scores.length)%> min="0" max="100" value=<%=threshold_list[i+focus_file.complexity_scores.length+focus_file.coupling_scores.length]%> onchange="updateTextInput(this.parentNode);">
                                        <input type="text" value=<%=threshold_list[i+focus_file.complexity_scores.length+focus_file.coupling_scores.length]%> id="textInput" class="slider-value <%='s'+(i+1+focus_file.complexity_scores.length+focus_file.coupling_scores.length)%>" onchange="updateSlider(this.parentNode);">
                                    </div>
                                </td>
                                </td>
                            </tr>
                        <% } %>
                    </table>
                </li>
                <li><div><span><b>CMA Thresholds</b></span></div></li>
                <li style="padding-bottom: 5%;">
                    <table class="threshold-table">
                        <tr>
                            <td class="threshold-table-tab">
                                <b>General</b>
                            </td>
                        </tr>
                        <% for (let i = 0; i < focus_file.general_scores.length; i++) { %>
                            <tr>
                                <td class="threshold-table-content" style="width: 40%;">
                                    <%= general_names[i] %>
                                </td>
                                <td>
                                    <div class="slider qma-threshold-update">
                                        <input type="range" id="rangeInput" name="rangeInput" class=<%='s'+(i+1+focus_file.complexity_scores.length+focus_file.coupling_scores.length+focus_file.cohesion_scores.length)%> min="0" max="100" value=<%=threshold_list[i+focus_file.complexity_scores.length+focus_file.coupling_scores.length+focus_file.cohesion_scores.length]%> onchange="updateTextInput(this.parentNode);">
                                        <input type="text" value=<%=threshold_list[i+focus_file.complexity_scores.length+focus_file.coupling_scores.length+focus_file.cohesion_scores.length]%> id="textInput" class="slider-value <%='s'+(i+1+focus_file.complexity_scores.length+focus_file.coupling_scores.length+focus_file.cohesion_scores.length)%>" onchange="updateSlider(this.parentNode);">
                                    </div>
                                </td>
                            </tr>
                        <% } %>
                        <tr>
                            <td class="threshold-table-tab">
                                <b>Naming</b>
                            </td>
                        </tr>
                        <% for (let i = 0; i < focus_file.naming_scores.length; i++) { %>
                            <tr>
                                <td class="threshold-table-content" style="width: 40%;">
                                    <%= naming_names[i] %>
                                </td>
                                <td>
                                    <div class="slider qma-threshold-update">
                                        <input type="range" id="rangeInput" name="rangeInput" class=<%='s'+(i+1+focus_file.complexity_scores.length+focus_file.coupling_scores.length+focus_file.cohesion_scores.length+focus_file.general_scores.length)%> min="0" max="100" value=<%=threshold_list[i+focus_file.complexity_scores.length+focus_file.coupling_scores.length+focus_file.cohesion_scores.length+focus_file.general_scores.length]%> onchange="updateTextInput(this.parentNode);">
                                        <input type="text" value=<%=threshold_list[i+focus_file.complexity_scores.length+focus_file.coupling_scores.length+focus_file.cohesion_scores.length+focus_file.general_scores.length]%> id="textInput" class="slider-value <%='s'+(i+1+focus_file.complexity_scores.length+focus_file.coupling_scores.length+focus_file.cohesion_scores.length+focus_file.general_scores.length)%>" onchange="updateSlider(this.parentNode);">
                                    </div>
                                </td>
                            </tr>
                        <% } %>
                    </table>
                </li>
            </ul>
        </div>
        <div class="grid-container">
            <div class="item1" style="background-color: #f5f5f5">
                <pre><code data-language="Java"><%=focus_file.code%></code></pre>
            </div>
            <div class="item2">
                <div><span class="grid-title">Quality Metric Analysis (QMA)</span></div>
                <table class="qma-score-table">
                    <tr>
                        <td>
                            <b>Complexity</b>
                        </td>
                    </tr>
                    <% for (let i = 0; i < focus_file.complexity_scores.length; i++) { %>
                        <tr>
                            <td class="table-title"><%= complexity_names[i] %>
                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-question-circle question" viewBox="0 0 16 16">
                                    <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z"/>
                                    <path d="M5.255 5.786a.237.237 0 0 0 .241.247h.825c.138 0 .248-.113.266-.25.09-.656.54-1.134 1.342-1.134.686 0 1.314.343 1.314 1.168 0 .635-.374.927-.965 1.371-.673.489-1.206 1.06-1.168 1.987l.003.217a.25.25 0 0 0 .25.246h.811a.25.25 0 0 0 .25-.25v-.105c0-.718.273-.927 1.01-1.486.609-.463 1.244-.977 1.244-2.056 0-1.511-1.276-2.241-2.673-2.241-1.267 0-2.655.59-2.75 2.286zm1.557 5.763c0 .533.425.927 1.01.927.609 0 1.028-.394 1.028-.927 0-.552-.42-.94-1.029-.94-.584 0-1.009.388-1.009.94z"/>
                                </svg>
                                <p class="metric-info-popup"></p>
                            </td>
                            <td class="progress-bar-cont">
                                <div role="progressbar" aria-valuenow="65" aria-valuemin="0" aria-valuemax="100" style="--value:<%= focus_file.complexity_scores[i]%>" class="color-circle <%='s'+(i+1)%>"></div>
                            </td>
                        </tr>
                    <% } %>

                    <tr>
                        <td>
                            <b>Coupling</b>
                        </td>
                    </tr>
                    <% for (let i = 0; i < focus_file.coupling_scores.length; i++) { %>
                        <tr>
                            <td class="table-title"><%= coupling_names[i] %>
                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-question-circle question" viewBox="0 0 16 16">
                                    <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z"/>
                                    <path d="M5.255 5.786a.237.237 0 0 0 .241.247h.825c.138 0 .248-.113.266-.25.09-.656.54-1.134 1.342-1.134.686 0 1.314.343 1.314 1.168 0 .635-.374.927-.965 1.371-.673.489-1.206 1.06-1.168 1.987l.003.217a.25.25 0 0 0 .25.246h.811a.25.25 0 0 0 .25-.25v-.105c0-.718.273-.927 1.01-1.486.609-.463 1.244-.977 1.244-2.056 0-1.511-1.276-2.241-2.673-2.241-1.267 0-2.655.59-2.75 2.286zm1.557 5.763c0 .533.425.927 1.01.927.609 0 1.028-.394 1.028-.927 0-.552-.42-.94-1.029-.94-.584 0-1.009.388-1.009.94z"/>
                                </svg>
                                <p class="metric-info-popup"></p>
                            </td>
                            <td>
                                <div role="progressbar" aria-valuenow="65" aria-valuemin="0" aria-valuemax="100" style="--value:<%= focus_file.coupling_scores[i]%>" class="color-circle <%='s'+(i+1+focus_file.complexity_scores.length)%>"></div>
                            </td>
                        </tr>
                    <% } %>

                    <tr>
                        <td>
                            <b>Cohesion</b>
                        </td>
                    </tr>
                    <% for (let i = 0; i < focus_file.cohesion_scores.length; i++) { %>
                        <tr>
                            <td class="table-title"><%= cohesion_names[i] %>
                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-question-circle question" viewBox="0 0 16 16">
                                    <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z"/>
                                    <path d="M5.255 5.786a.237.237 0 0 0 .241.247h.825c.138 0 .248-.113.266-.25.09-.656.54-1.134 1.342-1.134.686 0 1.314.343 1.314 1.168 0 .635-.374.927-.965 1.371-.673.489-1.206 1.06-1.168 1.987l.003.217a.25.25 0 0 0 .25.246h.811a.25.25 0 0 0 .25-.25v-.105c0-.718.273-.927 1.01-1.486.609-.463 1.244-.977 1.244-2.056 0-1.511-1.276-2.241-2.673-2.241-1.267 0-2.655.59-2.75 2.286zm1.557 5.763c0 .533.425.927 1.01.927.609 0 1.028-.394 1.028-.927 0-.552-.42-.94-1.029-.94-.584 0-1.009.388-1.009.94z"/>
                                </svg>
                                <p class="metric-info-popup"></p>
                            </td>
                            <td>
                                <div role="progressbar" aria-valuenow="65" aria-valuemin="0" aria-valuemax="100" style="--value:<%= focus_file.cohesion_scores[i]%>" class="color-circle <%='s'+(i+1+focus_file.complexity_scores.length+focus_file.coupling_scores.length)%>"></div>
                            </td>
                        </tr>
                    <% } %>
                </table>
                <div><span class="grid-title">Convention Metric Analysis (CMA)</span></div>
                <table class="cma-score-table">
                    <tr>
                        <td>
                            <b>General</b>
                        </td>
                    </tr>
                    <% for (let i = 0; i < general_names.length; i++) { %>
                        <tr>
                            <td class="table-title"><%= general_names[i] %>
                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-question-circle question" viewBox="0 0 16 16">
                                    <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z"/>
                                    <path d="M5.255 5.786a.237.237 0 0 0 .241.247h.825c.138 0 .248-.113.266-.25.09-.656.54-1.134 1.342-1.134.686 0 1.314.343 1.314 1.168 0 .635-.374.927-.965 1.371-.673.489-1.206 1.06-1.168 1.987l.003.217a.25.25 0 0 0 .25.246h.811a.25.25 0 0 0 .25-.25v-.105c0-.718.273-.927 1.01-1.486.609-.463 1.244-.977 1.244-2.056 0-1.511-1.276-2.241-2.673-2.241-1.267 0-2.655.59-2.75 2.286zm1.557 5.763c0 .533.425.927 1.01.927.609 0 1.028-.394 1.028-.927 0-.552-.42-.94-1.029-.94-.584 0-1.009.388-1.009.94z"/>
                                </svg>
                                <p class="metric-info-popup"></p>
                            </td>
                            <td>
                                <div role="progressbar" aria-valuenow="65" aria-valuemin="0" aria-valuemax="100" style="--value:<%= focus_file.general_scores[i]%>" class="color-circle <%='s'+(i+1+focus_file.complexity_scores.length+focus_file.coupling_scores.length+focus_file.cohesion_scores.length)%>"></div>
                            </td>
                        </tr>
                    <% } %>

                    <tr>
                        <td>
                            <b>Naming</b>
                        </td>
                    </tr>
                    <% for (let i = 0; i < focus_file.naming_scores.length; i++) { %>
                        <tr>
                            <td class="table-title"><%= naming_names[i] %>
                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-question-circle question" viewBox="0 0 16 16">
                                    <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z"/>
                                    <path d="M5.255 5.786a.237.237 0 0 0 .241.247h.825c.138 0 .248-.113.266-.25.09-.656.54-1.134 1.342-1.134.686 0 1.314.343 1.314 1.168 0 .635-.374.927-.965 1.371-.673.489-1.206 1.06-1.168 1.987l.003.217a.25.25 0 0 0 .25.246h.811a.25.25 0 0 0 .25-.25v-.105c0-.718.273-.927 1.01-1.486.609-.463 1.244-.977 1.244-2.056 0-1.511-1.276-2.241-2.673-2.241-1.267 0-2.655.59-2.75 2.286zm1.557 5.763c0 .533.425.927 1.01.927.609 0 1.028-.394 1.028-.927 0-.552-.42-.94-1.029-.94-.584 0-1.009.388-1.009.94z"/>
                                </svg>
                                <p class="metric-info-popup"></p>
                            </td>
                            <td>
                                <div role="progressbar" aria-valuenow="65" aria-valuemin="0" aria-valuemax="100" style="--value:<%= focus_file.naming_scores[i]%>" class="color-circle <%='s'+(i+1+focus_file.complexity_scores.length+focus_file.coupling_scores.length+focus_file.cohesion_scores.length+focus_file.general_scores.length)%>"></div>
                            </td>
                        </tr>
                    <% } %>
                </table>
                <button onclick="open_pie_chart()" style="width: 90%; height: 40%; margin-left: 5%" class="pie_chart_button">
                    <div id="chartdiv"></div>
                </button>
            </div>
            <div class="item4">
                <div>
                    <div id="submission-details">
                        <div id="submission-history">
                            <label><b>Submitted:</b></label>
                            <%= selected_student.submission.submission_time %>
                        </div>
                        <div id="submission-files">
                            <label><b>Submitted Files:</b></label>
                            <span>(Click to load)</span>
                            <div id="submitted-file-list">
                                <% for (let i = 0; i < selected_student.submission.file_list.length; i++) { %>
                                <div class="submission-file">
                                    <div class="container">
                                        <form action="http://localhost:3000/change_file" method="post" id="file_form" class="file_form_test">
                                            <button class="submission_button" type="submit" name=<%=selected_student.submission.file_list[i].id + '-' +selected_student.studentID%>><%= selected_student.submission.file_list[i].name %></button>
                                            <label>
                                                <input class="change_file_secret" name='student_id' value=<%=selected_student.studentID%>>
                                            </label>
                                            <label>
                                                <input class="change_file_secret" name='file_id' value=<%=selected_student.submission.file_list[i].id%>>
                                            </label>
                                            <% for (let i = 0; i < focus_file.coupling_scores.length + focus_file.cohesion_scores.length +focus_file.complexity_scores.length; i++) { %>
                                            <label>
                                                <input class="<%='s'+(i+1)%> change_file_secret file_threshold" name='fuck' value=<%=threshold_list[i]%>>
                                            </label>
                                            <% } %>

                                            <% for (let i = 0; i < focus_file.naming_scores.length + focus_file.general_scores.length; i++) { %>
                                            <label>
                                                <input class="<%='s'+(i+1+focus_file.coupling_scores.length + focus_file.cohesion_scores.length +focus_file.complexity_scores.length)%> change_file_secret file_threshold" name='fuck' value=<%=threshold_list[i+focus_file.coupling_scores.length + focus_file.cohesion_scores.length +focus_file.complexity_scores.length]%>>
                                            </label>
                                            <% } %>
                                            <a class="submission-file-download icon-download float-right" href="/courses/2173881/assignments/13793262/submissions/6962095?download=132327340" download="">
                                            <span class="screenreader-only">
                                              <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-download" viewBox="0 0 16 16">
                                                <path d="M.5 9.9a.5.5 0 0 1 .5.5v2.5a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1v-2.5a.5.5 0 0 1 1 0v2.5a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2v-2.5a.5.5 0 0 1 .5-.5z"/>
                                                <path d="M7.646 11.854a.5.5 0 0 0 .708 0l3-3a.5.5 0 0 0-.708-.708L8.5 10.293V1.5a.5.5 0 0 0-1 0v8.793L5.354 8.146a.5.5 0 1 0-.708.708l3 3z"/>
                                              </svg>
                                            </span>
                                            </a>
                                        </form>
                                    </div>
                                </div>
                                <% } %>
                            </div>
                        </div>

                    </div>
                    <div class="summary-container">
                        <button class="ui-button stacked" onclick="open_qma_form()">QMA Summary</button>
                        <button class="ui-button stacked" onclick="open_cma_form()">CMA Summary</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</body>
